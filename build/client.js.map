{"version":3,"file":"client.js","sourceRoot":"","sources":["../src/client.ts"],"names":[],"mappings":"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","sourcesContent":["import { makeRedirectUri, useAuthRequest } from \"expo-auth-session\";\nimport { Configuration, StorageKeys } from \"./types/client\";\nimport ExpoFitbitError from \"./utils/error\";\nimport { discovery } from \"./utils/constants\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Methods, OAuthResult, ProfileData } from \"./types/api\";\nimport { Routes } from \"./utils/routes\";\nimport { stringify } from \"qs\";\nimport { encode } from \"base-64\";\n\nexport class FitbitClient {\n    public configuration: Configuration;\n    constructor(configuration: Configuration) {\n        this.configuration = configuration;\n    }\n\n    private buildRedirectURL() {\n        if (!this.configuration.appScheme) throw new ExpoFitbitError(\"Looks like you forgot to add appScheme to your config\")\n        return makeRedirectUri({\n            scheme: this.configuration.appScheme,\n            path: \"fitbit\"\n        });\n    }\n\n    private async fetchProfile({ access_token, token_type }: {\n        access_token: string;\n        token_type: string;\n    }): Promise<ProfileData> {\n        const fetched = await fetch(Routes.Profile(), {\n            headers: {\n                'Authorization': `${token_type} ${access_token}`,\n                'Accept': 'application/json'\n            }\n        });\n\n        const jsonData = await fetched.json() as {\n            user: {\n                avatar: string;\n                displayName: string;\n                avatar150: string;\n                avatar640: string;\n                encodedId: string;\n                firstName: string;\n                lastName: string;\n                country: string;\n            }\n        };\n\n        return {\n            email: jsonData.user.encodedId,\n            family_name: jsonData.user.lastName,\n            given_name: jsonData.user.firstName,\n            id: jsonData.user.encodedId,\n            locale: jsonData.user.country,\n            name: jsonData.user.displayName,\n            picture: jsonData.user.avatar,\n            verified_email: true\n        };\n    }\n\n    private async refreshToken(refresh_token: string) {\n        const result = await fetch(Routes.Token(), {\n            method: Methods.Post,\n            body: stringify({\n                grant_type: 'refresh_token',\n                refresh_token: refresh_token\n            }),\n            headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                \"Authorization\":\n                    'Basic ' +\n                    encode(this.configuration.clientId + ':' + this.configuration.clientSecret),\n                \"Accept\": 'application/json, text/plain, */*',\n                \"grant_type\": \"refresh_token\"\n            },\n        }).then(r => r.json()) as OAuthResult;\n\n        if (typeof result?.access_token == \"string\") {\n            this.configuration.storage.set(StorageKeys.OAuth, JSON.stringify(result));\n            return result;\n        } else throw new ExpoFitbitError(\"Couldn't get a new pair of access tokens\");\n    }\n\n    useConfiguration() {\n        const [userData, setUserData] = useState<ProfileData>();\n        const [isLoading, setLoading] = useState(false);\n        const [isLoggedIn, setIsLoggedIn] = useState(false);\n        const [access_token, setAccessToken] = useState<string>();\n        const [token_type, setTokenType] = useState<string>();\n        const [request, response, promptAsync] = useAuthRequest(\n            {\n                clientId: this.configuration.clientId,\n                scopes: this.configuration.scopes,\n                redirectUri: this.buildRedirectURL()\n            },\n            discovery\n        );\n\n        const refreshProfile = useCallback(() => {\n            (async () => {\n                if (!access_token || token_type) {\n                    const error = {\n                        error: true,\n                        message: \"access_token and/or token_type is undefined (user not logged in)\"\n                    };\n\n                    if (this.configuration.debugLogs) console.log(error);\n                    return error;\n                } else {\n                    const val = await this.fetchProfile({\n                        access_token: access_token as string,\n                        token_type: token_type as string\n                    });\n\n                    setUserData(val);\n                    const message = {\n                        error: false,\n                        message: \"Fetched and updated user profile data\"\n                    };\n\n                    if (this.configuration.debugLogs) console.log(message);\n                    return message;\n                }\n            })();\n        }, [access_token, token_type]);\n\n        useEffect(() => {\n            if (response?.type === 'success') {\n                setLoading(true);\n                const { code } = response.params;\n                (async () => {\n                    if (!request?.codeVerifier) throw new ExpoFitbitError(\"request.codeVerifier is undefined\");\n                    const body = new URLSearchParams({\n                        'client_id': this.configuration.clientId,\n                        'code': code,\n                        'code_verifier': request.codeVerifier,\n                        'grant_type': 'authorization_code',\n                        'redirect_uri': this.buildRedirectURL()\n                    });\n\n                    await fetch(`${discovery.tokenEndpoint}?${body.toString()}`, {\n                        method: \"POST\",\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded'\n                        },\n                        body\n                    }).then(async r => {\n                        if (r.status == 200) {\n                            const rslt = await r.json() as OAuthResult;\n                            this.configuration.storage.set(StorageKeys.OAuth, JSON.stringify({\n                                ...rslt,\n                                expiryStart: new Date().toISOString()\n                            }));\n\n                            this.fetchProfile({\n                                access_token: rslt.access_token,\n                                token_type: rslt.token_type\n                            })\n                                .then(val => {\n                                    if (this.configuration.onLogin) this.configuration.onLogin(val);\n                                    setIsLoggedIn(true);\n                                    setUserData(val);\n                                    setLoading(false);\n                                });\n                        }\n                    })\n                })();\n            }\n        }, [response]);\n\n        return {\n            userData,\n            isLoading,\n            isLoggedIn,\n            refreshProfile\n        }\n    }\n}"]}